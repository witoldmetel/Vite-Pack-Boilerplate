{
	"compilerOptions": {
		/* Basic Options */
		"target": "ESNEXT" /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017','ES2018' or 'ESNEXT'. */,
		"module": "ESNext" /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */,
		"lib": [
			"DOM",
			"DOM.Iterable",
			"ESNext"
		] /* Specify library files to be included in the compilation. */,
		"useDefineForClassFields": true /* This flag is used as part of migrating to the upcoming standard version of class fields. TypeScript introduced class fields many years before it was ratified in TC39. The latest version of the upcoming specification has a different runtime behavior to TypeScriptâ€™s implementation but the same syntax. This flag switches to the upcoming ECMA runtime behavior. */,
		"allowJs": true /* Allow javascript files to be compiled. */,
		// "checkJs": true,                       /* Report errors in .js files. */
		"jsx": "react-jsx" /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */,
		// "declaration": true,                   /* Generates corresponding '.d.ts' file. */
		// "declarationMap": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */
		"sourceMap": true /* Generates corresponding '.map' file. */,
		// "outFile": "./",                       /* Concatenate and emit output to single file. */
		"outDir": "./dist/" /* Redirect output structure to the directory. */,
		// "rootDir": "./",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */
		// "composite": true,                     /* Enable project compilation */
		// "removeComments": true,                /* Do not emit comments to output. */
		"noEmit": true /* Do not emit outputs. */,
		"importHelpers": true /* Import emit helpers from 'tslib'. */,
		"downlevelIteration": true /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */,
		// "isolatedModules": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */
		"incremental": true /* Faster subsequent builds with the --incremental flag */,

		/* Strict Type-Checking Options */
		"strict": true /* Enable all strict type-checking options. */,
		"noImplicitAny": false /* Raise error on expressions and declarations with an implied 'any' type. */,
		"strictNullChecks": true /* Enable strict null checks. */,
		"strictFunctionTypes": true /* Enable strict checking of function types. */,
		// "strictPropertyInitialization": true,  /* Enable strict checking of property initialization in classes. */
		"noImplicitThis": true /* Raise error on 'this' expressions with an implied 'any' type. */,
		// "alwaysStrict": true,                  /* Parse in strict mode and emit "use strict" for each source file. */

		/* Additional Checks */
		// "noUnusedLocals": true,                /* Report errors on unused locals. */
		// "noUnusedParameters": true,            /* Report errors on unused parameters. */
		// "noImplicitReturns": true,             /* Report error when not all code paths in function return a value. */
		// "noFallthroughCasesInSwitch": true,    /* Report errors for fallthrough cases in switch statement. */
		"skipLibCheck": true /* Skip type checking of declaration files. */,

		/* Module Resolution Options */
		"moduleResolution": "node" /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */,
		"baseUrl": "src",                       /* Base directory to resolve non-absolute module names. */
		// "paths": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
		// "rootDirs": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */
		// "typeRoots": [],                       /* List of folders to include type definitions from. */
		// "types": [],                           /* Type declaration files to be included in compilation. */
		"allowSyntheticDefaultImports": true /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */,
		"esModuleInterop": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,
		// "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */

		/* Source Map Options */
		// "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */
		// "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */
		// "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */
		// "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

		/* Experimental Options */
		"experimentalDecorators": true /* Enables experimental support for ES7 decorators. */,
		"emitDecoratorMetadata": true /* Enables experimental support for emitting type metadata for decorators. */,
		"forceConsistentCasingInFileNames": true /* When this option is set, TypeScript will issue an error if a program tries to include a file by a casing different from the casing on disk. */
	},
	"include": ["src"],
	"exclude": ["node_modules", "public", ".cache"],
	"plugins": [
		{ "name": "typescript-expect-plugin" }
	] /* https://www.npmjs.com/package/typescript-expect-plugin */,
	"references": [{ "path": "./tsconfig.node.json" }]
}
